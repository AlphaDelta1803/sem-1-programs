1) Using functions generate prime numbers using method od Sieve of Eratosthenes
def Sieve_eratosthenes(n):
    prime_nums = []
    for i in range(2, n+1):
        if i not in prime_nums:
            print(i)
            for j in range(i*i, n+1, i):
                prime_nums.append(j)

num = int(input())
Sieve_eratosthenes(num)

2) Reverse the given string using recursion
def reverse(string):
    if len(string) == 0:
        return string
    else:
        return reverse(string[1:]) + string[0]

str = input()
print(reverse(str))

3)
# a) Solve Tower of Hanoi
def towerOfHanoi(n, from1, to, aux)
    if n == 1:
        print("Move ring 1 from", from1, "peg", to, "peg")
    return
    towerofHanoi(n-1, from1, aux, to)
    print("Move ring", n, "from", from1, "peg", to, "peg")
    towerOfHanoi(n-1, aux,to, from1)

num = int(input("Enter number of discs: "))
towerOfHanoi(num, "Left", "Right", "Middle")

b) Use recursion to raise a number to a given power n
def power(num, toPwr):
    if toPwr == 0:
        return 1
    else:
        return num * power(num, toPwr - 1)

num, pow = input("Enter a number raised to a power (2^3): ").split("^")
num = int(num), pow = int(pow)
print(power(num, pow))

4) Use callback to find sum, double and triple the given number
def sum1(x):
    s = 0
    for i in range(1, x+1):
        s = s + i
    print("Sum is", s)
def doubleIt(x):
    print("Double of", x, "is", x*2)
def tripleIt(x):
    print("Triple of", x, "is", x*3)
def someAction(i, cb):
    cb(i)

num = int(input())
someAction(num, sum1)
someAction(num, doubleIt)
someAction(num, tripleIt)